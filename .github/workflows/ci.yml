name: Chatbot Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  tests:
    name: 🐳 CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies for test runner
        run: npm ci

      - name: Create .env.test file from GitHub Secrets
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.test
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.test
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.test
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.test
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.test
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.test
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.test
          echo "OPENAI_API_COMPLETIONS=${{ secrets.OPENAI_API_COMPLETIONS }}" >> .env.test
          echo "OPENAI_API_RESPONSES=${{ secrets.OPENAI_API_RESPONSES }}" >> .env.test
          echo "OPENAI_API_MODEL=${{ secrets.OPENAI_API_MODEL }}" >> .env.test
          echo "KPI_FUNC_SAMPLES=10" >> .env.test
          echo "KPI_FUNC_KEYWORD_SUCCESS_RATE_THRESHOLD=0.80" >> .env.test
          echo "KPI_FUNC_KEYWORD_PRESENCE_RATE=0.9" >> .env.test
          echo "KPI_FUNC_MAX_LATENCY_MS=8000" >> .env.test
          echo "KPI_FAIR_POLITENESS_DP_DIFF=0.0" >> .env.test
          echo "KPI_FAIR_SENTIMENT_DP_DIFF=0.1 " >> .env.test

      - name: Build and start services with Docker Compose
        run: docker compose --env-file .env.test up -d --build

      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          until curl --fail http://localhost:3000; do
            sleep 2
          done
          echo "App is ready."

      - name: Run database migrations
        run: docker compose --env-file .env.test exec -T app npm run migrate

      - name: Run seed script
        run: docker compose --env-file .env.test exec -T app npm run seed

      - name: Run unit tests
        run: docker compose --env-file .env.test exec -T app npm run test

      - name: Run security tests
        run: docker compose --env-file .env.test run --rm test-runner pytest tests/security/security.py --junitxml=tests/reports/security/security_test.xml

      - name: Run performance tests
        run: docker compose --env-file .env.test run --rm test-runner locust -f tests/performance/locustfile.py --headless -u 3 -r 2 -t 30s --csv=tests/reports/performance/performance

      - name: Run API tests
        run: docker compose --env-file .env.test run --rm test-runner pytest tests/api/apierrors.py --junitxml=tests/reports/api/api_test.xml

      - name: Run Bias tests
        run: docker compose --env-file .env.test run --rm test-runner pytest tests/bias/bias.py --junitxml=tests/reports/bias/bias_test.xml

      - name: Run Functional tests
        run: docker compose --env-file .env.test run --rm test-runner pytest tests/functional/functional.py --junitxml=tests/reports/functional/functional_test.xml

      - name: Upload Reports
        if: ${{ always() }}
        run: |
          sudo apt-get update && sudo apt-get install -y lftp
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          lftp -u "${{ secrets.FTP_USERNAME }},${{ secrets.FTP_PASSWORD }}" ${{ secrets.FTP_HOST }} <<EOF
            set ftp:passive-mode on
            set net:max-retries 2
            set net:persist-retries 1
            set ftp:ssl-allow no
            mkdir -p ${{ secrets.FTP_REMOTE_PATH }}/$TIMESTAMP
            mirror -R tests/reports ${{ secrets.FTP_REMOTE_PATH }}/$TIMESTAMP
            quit
          EOF

      - name: Shut down Docker Compose
        if: ${{ always() }}
        run: docker compose --env-file .env.test down
